/*global angular */

/**
 * The main controller for the app. The controller:
 * - retrieves and persists the model via the bookmarkStorage service
 * - exposes the model to the template and provides event handlers
 */
angular.module('bookmarkmvc').controller('BookmarkCtrl', function BookmarkCtrl($scope, $routeParams, $filter, store) {
  'use strict';

  var bookmarks = $scope.bookmarks = store.bookmarks;

  $scope.newBookmark = '';
  $scope.editedBookmark = null;

  $scope.$watch('bookmarks', function () {
    $scope.remainingCount = $filter('filter')(bookmarks, { completed: false }).length;
    $scope.completedCount = bookmarks.length - $scope.remainingCount;
    $scope.allChecked = !$scope.remainingCount;
  }, true);

  // Monitor the current route for changes and adjust the filter accordingly.
  $scope.$on('$routeChangeSuccess', function () {
    var status = $scope.status = $routeParams.status || '';
    $scope.statusFilter = (status === 'active') ? { completed: false } : (status === 'completed') ? { completed: true } : {};
  });

  $scope.addBookmark = function () {
    var newBookmark = {
      title: $scope.newBookmark.trim(),
      completed: false
    };

    if (!newBookmark.title) {
      return;
    }

    $scope.saving = true;
    store.insert(newBookmark).then(function success() {
      $scope.newBookmark = '';
    }).finally(function () {
      $scope.saving = false;
    });
  };

  $scope.editBookmark = function (bookmark) {
    $scope.editedBookmark = bookmark;
    // Clone the original bookmark to restore it on demand.
    $scope.originalBookmark = angular.extend({}, bookmark);
  };

  $scope.saveEdits = function (bookmark, event) {
    // Blur events are automatically triggered after the form submit event.
    // This does some unfortunate logic handling to prevent saving twice.
    if (event === 'blur' && $scope.saveEvent === 'submit') {
      $scope.saveEvent = null;
      return;
    }

    $scope.saveEvent = event;

    if ($scope.reverted) {
      // Bookmark edits were reverted-- don't save.
      $scope.reverted = null;
      return;
    }

    bookmark.title = bookmark.title.trim();

    if (bookmark.title === $scope.originalBookmark.title) {
      $scope.editedBookmark = null;
      return;
    }

    store[bookmark.title ? 'put' : 'delete'](bookmark).then(function success() {}, function error() {
      bookmark.title = $scope.originalBookmark.title;
    }).finally(function () {
      $scope.editedBookmark = null;
    });
  };

  $scope.revertEdits = function (bookmark) {
    bookmarks[bookmarks.indexOf(bookmark)] = $scope.originalBookmark;
    $scope.editedBookmark = null;
    $scope.originalBookmark = null;
    $scope.reverted = true;
  };

  $scope.removeBookmark = function (bookmark) {
    store.delete(bookmark);
  };

  $scope.saveBookmark = function (bookmark) {
    store.put(bookmark);
  };

  $scope.toggleCompleted = function (bookmark, completed) {
    if (angular.isDefined(completed)) {
      bookmark.completed = completed;
    }
    store.put(bookmark, bookmarks.indexOf(bookmark)).then(function success() {}, function error() {
      bookmark.completed = !bookmark.completed;
    });
  };

  $scope.clearCompletedBookmarks = function () {
    store.clearCompleted();
  };

  $scope.markAll = function (completed) {
    bookmarks.forEach(function (bookmark) {
      if (bookmark.completed !== completed) {
        $scope.toggleCompleted(bookmark, completed);
      }
    });
  };
});
